generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = -1
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id     Int               @id
    name   String
    groups GroupMembership[]

    @@index([name])
}

model GroupMembership {
    user       User   @relation(fields: [user_id], references: [id])
    group      Group  @relation(fields: [group_name], references: [name], onDelete: Cascade)
    user_id    Int
    group_name String

    protected Boolean @default(false)

    @@id([user_id, group_name])
}

model Group {
    name             String              @id
    members          GroupMembership[]
    allowed_commands CommandPermission[]
    can_manage       Group[]             @relation(name: "management")
    is_managed_by    Group[]             @relation(name: "management")
}

model CommandPermission {
    command    String
    group      Group  @relation(fields: [group_name], references: [name], onDelete: Cascade)
    group_name String

    @@id([command, group_name])
}

model Trick {
    name String @id
    body String
}

model AutolabelRule {
    id         String            @id @default(cuid())
    type       AutolabelRuleType
    repository String

    match String
    label String

    @@index([repository, type])
    @@unique([repository, type, match, label])
}

enum AutolabelRuleType {
    linked_issue @map("LINKED_ISSUE")
    branch_name @map("BRANCH_NAME")
}
